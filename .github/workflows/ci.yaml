name: CI_new156

on:
  release:
    types: [created, deleted]

permissions:
  packages: write
  contents: read

jobs:
  release-push:
    if: github.event.action == 'created'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin || { echo "Error: Failed to authenticate to GitHub Container Registry."; exit 1; }

      - name: Build and push Docker image for release
        run: |
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="${{ github.event.repository.name }}"
          IMAGE_NAME="ghcr.io/${REPO_OWNER,,}/${REPO_NAME,,}"
          TAG="${{ github.event.release.tag_name }}"
          echo "Building Docker image with tag: $TAG"
          docker build --platform linux/amd64 --build-arg ARCH=amd64 -t "$IMAGE_NAME:$TAG" .
          echo "Pushing Docker image with tag: $TAG"
          docker push "$IMAGE_NAME:$TAG"
          if [[ "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Tag matches version pattern. Tagging as latest."
            docker tag "$IMAGE_NAME:$TAG" "$IMAGE_NAME:latest"
            docker push "$IMAGE_NAME:latest"
          else
            echo "Tag does not match version pattern. Skipping latest tag."
          fi

  rollback:
    if: github.event.action == 'deleted'
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/ci_test
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Log in to GitHub Container Registry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin || { echo "Error: Failed to authenticate to GitHub Container Registry."; exit 1; }

      - name: Fetch previous version to assign 'latest' tag
        id: fetch_previous_tag
        run: |
          IMAGE_NAME_LOWER=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          TAG="${{ github.event.release.tag_name }}"
  
          echo "Fetching image versions to find and delete tag: $TAG"
          RESPONSE=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: Bearer $GH_TOKEN" "https://api.github.com/users/NikGor/packages/container/ci_test/versions")
          
          if echo "$RESPONSE" | grep -q '"message"'; then
            echo "Error: GitHub API returned an error message. Response: $RESPONSE"
            exit 1
          fi
  
          VERSION_ID=$(echo "$RESPONSE" | jq -r --arg TAG "$TAG" '.[] | select(.metadata.container.tags[] == $TAG) | .id')
  
          if [ -n "$VERSION_ID" ] && [ "$VERSION_ID" != "null" ]; then
            curl -s -X DELETE -H "Accept: application/vnd.github.package-deletes-preview+json" -H "Authorization: Bearer $GH_TOKEN" "https://api.github.com/users/NikGor/packages/container/ci_test/versions/$VERSION_ID"
            echo "Deleted image with ID: $VERSION_ID"
          else
            echo "No image version found with tag $TAG."
            exit 1
          fi
  
          PREVIOUS_TAG=$(echo "$RESPONSE" | jq -r --arg VERSION_ID "$VERSION_ID" '
            .[] 
            | select(.id != ($VERSION_ID | tonumber) and (.metadata.container.tags[]? | select(type == "string") | test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) 
            | .metadata.container.tags[0]' | head -n 1)
  
          echo "Previous tag found: $PREVIOUS_TAG"
          echo "::set-output name=previous_tag::$PREVIOUS_TAG"

      - name: Build and push Docker image with 'latest' tag based on previous version
        if: success()
        env:
          PREVIOUS_TAG: ${{ steps.fetch_previous_tag.outputs.previous_tag }}
        run: |
          REPO_OWNER="${{ github.repository_owner }}"
          REPO_NAME="ci_test"
          IMAGE_NAME="ghcr.io/${REPO_OWNER,,}/${REPO_NAME,,}"
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "Error: PREVIOUS_TAG is empty. Cannot proceed with rebuilding the Docker image."
            exit 1
          fi
  
          echo "Rebuilding Docker image with previous tag: $PREVIOUS_TAG"
          docker pull "$IMAGE_NAME:$PREVIOUS_TAG"
          docker tag "$IMAGE_NAME:$PREVIOUS_TAG" "$IMAGE_NAME:latest"
          echo "Pushing Docker image with 'latest' tag"
          docker push "$IMAGE_NAME:latest"